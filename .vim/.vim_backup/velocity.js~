// Generated by CoffeeScript 1.4.0
(function() {
  var contentType, exec, fs, obsolete, spawn, syspath, sysurl, urlrouter, utils, _get_loader_path;

  exec = require("child_process").exec;

  fs = require("fs");

  obsolete = require("./velocity.obsolete");

  spawn = require("child_process").spawn;

  syspath = require("path");

  sysurl = require("url");

  urlrouter = require("urlrouter");

  utils = require('../util');

  contentType = {
    'Content-Type': "text/html;charset=UTF-8",
	'Access-Control-Allow-Origin': '*'
  };

  module.exports = function(options) {
    var ROOT, existsJava;
    existsJava = false;
    exec("java -version", function(error, stdout, stderr) {
      if (!error) {
        return existsJava = true;
      } else {
        utils.logger.error("使用原生 velocity，全面支持 velocity 特性，前往下方地址，下载并安装 jre ");
        return utils.logger.error("http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html");
      }
    });
    ROOT = options.cwd;
    return urlrouter(function(app) {
      return app.get(/\.(vm|vmhtml)\b/, function(req, res, next) {
        var conf, ctx, jar, java, p, url, vmjs_path, vmjson_path;
        if (existsJava === false) {
          obsolete(req, res, next, options);
          return res.end();
        }
        url = sysurl.parse(req.url);
        p = syspath.join(ROOT, url.pathname);
        vmjs_path = p.replace('.vm', '.vmjs');
        vmjson_path = p.replace('.vm', '.json');
        jar = syspath.join(__dirname, "../..", "bin/velocity-for-fekit.jar");
        conf = utils.config.parse(p);
        if (utils.path.exists(vmjs_path)) {
          delete require.cache[vmjs_path];
          ctx = utils.proc.requireScript(vmjs_path, {
            request: req,
            response: res,
            utils: utils
          });
        } else if (utils.path.exists(vmjson_path)) {
          ctx = utils.file.io.readJSON(vmjson_path);
        } else {
          ctx = {};
        }
        ctx["velocity.fekit.loader.path"] = _get_loader_path(conf) || syspath.dirname(p);
        ctx["velocity.fekit.filename"] = syspath.relative(ctx["velocity.fekit.loader.path"], p);
        ctx = JSON.stringify(ctx);
        res.writeHead(200, contentType);
        java = spawn("java", ["-jar", jar, ctx]);
        java.stdout.on("data", function(buf) {
          return res.write(buf);
        });
        java.stderr.on("data", function(buf) {
          return res.write(buf);
        });
        java.on("error", function(err) {
          return utils.logger.error(err.stack);
        });
        return java.on("close", function(code) {
          return res.end();
        });
      });
    });
  };

  _get_loader_path = function(conf) {
    var root, _ref, _ref1;
    root = conf != null ? (_ref = conf.root) != null ? (_ref1 = _ref.development) != null ? _ref1.velocity_root : void 0 : void 0 : void 0;
    if (root) {
      root = utils.path.join(conf.fekit_root_dirname, root);
      if (!fs.existsSync(root)) {
        root = utils.path.join(root, "../refs/vm");
      }
      if (!fs.existsSync(root)) {
        return null;
      } else {
        return root;
      }
    } else {
      return null;
    }
  };

}).call(this);
