var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:6228/test', {
		user: 'test',
		pass: '111111'
});

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function(callback) {
		console.log('open');
});

var Schema = mongoose.Schema;

var kittySchema = mongoose.Schema({
		name: String
});

var blogSchema = new Schema({
		title: String,
		author: String,
		body: String,
		comments: [{body: String, date: Date}],
		date: {type:Date, default: Date.now},
		hidden: Boolean,
		meta: {
				votes: Number,
				favs: Number
		}
});

var Blog = mongoose.model('Blog', blogSchema);

var animalSchema = new Schema({name: String, type: String});
animalSchema.methods.findSimilarTypes = function(cb) {
		return this.model('Animal').find({type: this.type}, cb);
};

animalSchema.statics.findByName = function(name, cb) {
		this.find({name: new RegExp(name, 'i')}, cb);
};

var Animal = mongoose.model('Animal', animalSchema);

Animal.findByName('mimi', function(err, animals) {

});

/*
var dog = new Animal({type: 'dog'});
dog.findSimilarTypes(function(err, dogs) {
		console.log(dogs);
});


/*

kittySchema.methods.speak = function() {
		var greeting = this.name ? 'Meow name is ' + this.name : 'I don\'t have a name';
		console.log(greeting);
};

var Kitten = mongoose.model('Kitten', kittySchema);

var silence = new Kitten({name: 'Silence'});
console.log(silence.name);

var fluffy = new Kitten({name: 'fluffy'});

fluffy.save(function(err, fluffy) {
		if (err) return console.error(err);
		fluffy.speak();
});
*/
